#!/usr/bin/env zsh

# -----------------------------------------------------------------------------
# run_py_test.sh
#
# A Zsh script to find the project root, convert a Python script path to a
# module path, and run it using 'uv run'.
#
# Usage:
#   ./run_py_test.sh path/to/your/test_script.py
#
# Example:
#   Given a project structure:
#   /path/to/project/
#   ‚îú‚îÄ‚îÄ .git/
#   ‚îú‚îÄ‚îÄ pyproject.toml
#   ‚îî‚îÄ‚îÄ tests/
#       ‚îî‚îÄ‚îÄ test_api.py
#
#   Running from anywhere inside the project:
#   ./run_py_test.sh tests/test_api.py
#
#   Will execute the following command from `/path/to/project/`:
#   uv run python -m tests.test_api
# -----------------------------------------------------------------------------

# --- Configuration ---
# The marker file or directory that identifies the project root.
# Common choices are '.git', 'pyproject.toml', '.project_root'
PROJECT_ROOT_MARKER=".git"

# --- Functions ---

# Function to print an error message and exit.
# Usage: error_exit "Your error message here"
error_exit() {
  echo "‚ùå Error: $1" >&2
  exit 1
}

# Function to find the project root by searching upwards for the marker.
# Sets the global variable PROJECT_ROOT.
find_project_root() {
  local current_dir
  current_dir=$(pwd)
  while [[ "$current_dir" != "/" ]]; do
    if [[ -e "$current_dir/$PROJECT_ROOT_MARKER" ]]; then
      PROJECT_ROOT="$current_dir"
      return 0
    fi
    current_dir=$(dirname "$current_dir")
  done
  return 1
}

# --- Script Main Logic ---

# 1. Check for script argument
if [[ $# -eq 0 ]]; then
  error_exit "No test script specified.\nUsage: $0 path/to/your/test_script.py"
fi

# The Python script file provided as the first argument.
SCRIPT_FILE="$1"

# 2. Validate the script file path
# Use :a to get the absolute path, which helps in later transformations.
if [[ ! -f "$SCRIPT_FILE" ]]; then
  error_exit "File not found: '$SCRIPT_FILE'"
fi
ABSOLUTE_SCRIPT_PATH="${SCRIPT_FILE:a}"

# 3. Identify the project root
echo "üîç Searching for project root (marker: '$PROJECT_ROOT_MARKER')..."
if ! find_project_root; then
  error_exit "Could not find project root. Traversed up to '/'."
fi
echo "‚úÖ Project root found: $PROJECT_ROOT"

# 4. Compose the Python module path
# First, get the script's path relative to the project root.
# This is done by removing the project root path prefix from the absolute script path.
if [[ "$ABSOLUTE_SCRIPT_PATH" != "$PROJECT_ROOT"* ]]; then
    error_exit "The specified script '$SCRIPT_FILE' is not inside the project root '$PROJECT_ROOT'."
fi

# Remove the project root and the leading slash
RELATIVE_SCRIPT_PATH=${ABSOLUTE_SCRIPT_PATH#"$PROJECT_ROOT/"}

# Remove the '.py' extension
MODULE_PATH=${RELATIVE_SCRIPT_PATH%".py"}

# Replace all slashes '/' with dots '.'
MODULE_PATH=${MODULE_PATH//\//.}

echo "üêç Converted to module path: $MODULE_PATH"

# 5. Change to the project root and run the command
echo "üöÄ Changing directory to project root and executing command..."
cd "$PROJECT_ROOT" || error_exit "Could not change directory to '$PROJECT_ROOT'."

# Construct the final command
FULL_COMMAND="uv run python -m $MODULE_PATH"

echo "   Executing: $FULL_COMMAND"
echo "--------------------------------------------------"

# Execute the command. The output will be displayed in the current terminal.
eval $FULL_COMMAND

echo "--------------------------------------------------"
echo "‚úÖ Script execution finished."
