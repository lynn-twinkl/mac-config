#!/usr/bin/env zsh

# -----------------------------------------------------------------------------
# A script to find the project root, convert a Python script path to a
# module path, and run it using 'uv run', passing along any extra arguments.
#
# Usage:
#   ./uvtest path/to/your/test_script.py [args_for_script...]
#
# Example:
#   ./uvtest tests/test_api.py --some-flag "some value"
# -----------------------------------------------------------------------------

# --- CONFIGURATION ---
START_TIME=$SECONDS
PROJECT_ROOT_MARKER="pyproject.toml"

# --- FUNCTIONS ---

# Function to print an error message and exit.
error_exit() {
  echo "‚ùå Error: $1" >&2
  exit 1
}

# Function to find the project root by searching upwards for the marker.
# Sets the global variable PROJECT_ROOT.
find_project_root() {
  local current_dir
  current_dir=$(pwd)
  while [[ "$current_dir" != "/" ]]
  do
    if [[ -e "$current_dir/$PROJECT_ROOT_MARKER" ]]; then
      PROJECT_ROOT="$current_dir"
      return 0
    fi
    current_dir=$(dirname "$current_dir")
  done
  return 1
}

# --- SCRIPT MAIN LOGIC ---

# 1. Validate that at least the script file is provided
if [[ $# -eq 0 ]]; then
  # Updated usage message to show that extra arguments are accepted
  error_exit "No test script specified.\nUsage: $0 path/to/your/test_script.py [args_for_script...]"
fi

SCRIPT_FILE="$1"
shift # Remove the script file from the argument list.

# 2. Validate the script file path
# Use :a to get the absolute path, which helps in later transformations.
if [[ ! -f "$SCRIPT_FILE" ]]; then
  error_exit "File not found: '$SCRIPT_FILE'"
fi
ABSOLUTE_SCRIPT_PATH="${SCRIPT_FILE:a}"

# 3. Identify the project root
if ! find_project_root; then
  error_exit "Could not find project root. Traversed up to '/'."
fi
echo ""
echo "üîé Project root found: $PROJECT_ROOT (marker: '$PROJECT_ROOT_MARKER')"

# 4. Compose the Python module path
# First, get the script's path relative to the project root.
# This is done by removing the project root path prefix from the absolute script path.
if [[ "$ABSOLUTE_SCRIPT_PATH" != "$PROJECT_ROOT"* ]]; then
    error_exit "The specified script '$SCRIPT_FILE' is not inside the project root '$PROJECT_ROOT'."
fi

# Remove the project root and the leading slash
RELATIVE_SCRIPT_PATH=${ABSOLUTE_SCRIPT_PATH#"$PROJECT_ROOT/"}

# Remove the '.py' extension
MODULE_PATH=${RELATIVE_SCRIPT_PATH%".py"}

# Replace all slashes '/' with dots '.'
MODULE_PATH=${MODULE_PATH//\//.}

echo "‚ö°Ô∏è Using module path: $MODULE_PATH"

# 5. Change to the project root and run the command
cd "$PROJECT_ROOT" || error_exit "Could not change directory to '$PROJECT_ROOT'."

# Construct the final command, including any additional arguments.
# "$@" will now expand to all arguments that came *after* the script name.
echo "üß™ Executing: uv run python -m \"$MODULE_PATH\" \"$@\""
echo "--------------------------------------------------"

# Execute the command directly, with "$@" quoted to preserve arguments with spaces.
uv run python -m "$MODULE_PATH" "$@"

ELAPSED_TIME=$(( SECONDS - START_TIME ))

echo ""
echo "--------------------------------------------------"
echo "‚úÖ Execution finished in ~ ${ELAPSED_TIME} seconds"
echo ""
